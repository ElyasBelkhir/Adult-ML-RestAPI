# Becker,Barry and Kohavi,Ronny. (1996). Adult. UCI Machine Learning Repository. https://doi.org/10.24432/C5XW20.

# -*- coding: utf-8 -*-
"""Adult - ML

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cDShztvK_BKAcmy9st4hckPlDdDouu3_

#Load Data, Cols, Display
"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from imblearn.over_sampling import RandomOverSampler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
from joblib import dump, load
from imblearn.over_sampling import SMOTE


cols = ['age', 'workclass', 'fnlwgt', 'education', 'education_num',
                'marital_status', 'occupation', 'relationship', 'race',
                'sex', 'capital_gain', 'capital_loss', 'hours_per_week',
                'native_country', 'income']

df = pd.read_csv('adult.data', names=cols, na_values=' ?')
df["income"] = (df["income"] == " >50K").astype(int)
df.dropna(inplace=True)


"""
#One-Hot Encoding
"""

df = pd.get_dummies(df, columns=['workclass', 'education', 'marital_status',
                                 'occupation', 'relationship', 'race',
                                 'sex', 'native_country'])

print("Encoded")
print(df)

columns_used = df.columns.tolist()
columns_used = [col for col in columns_used if col != 'income']
dump(columns_used, 'columns.joblib')

"""#Scale"""

scaler = StandardScaler()
df[['age', 'fnlwgt', 'education_num', 'capital_gain', 'capital_loss', 'hours_per_week']] = scaler.fit_transform(df[['age', 'fnlwgt', 'education_num', 'capital_gain', 'capital_loss', 'hours_per_week']])
dump(scaler, 'scaler.joblib')

"""# Train, validation, test data

seperate data
"""

X = df.drop("income", axis=1)
y = df["income"]

X_temp, X_test, y_temp, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

X_train, X_valid, y_train, y_valid = train_test_split(X_temp, y_temp, test_size=0.25, random_state=42, stratify=y_temp)  # 0.25 x 0.8 = 0.2

"""Oversample test data"""

ros = RandomOverSampler()
smote = SMOTE()

X_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train)

"""Train Data"""

model = RandomForestClassifier()
model.fit(X_train_resampled, y_train_resampled)

"""Evaluate with Valid and Test - Random Forest Classifier"""

y_pred_valid = model.predict(X_valid)
print(classification_report(y_valid, y_pred_valid))

y_pred_test = model.predict(X_test)
print(classification_report(y_test, y_pred_test))

# Save model
dump(model, 'model.joblib')
# Load model
model = load('model.joblib')